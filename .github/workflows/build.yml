name: Build and Test

on:
  push:
    branches: [ "main", "copilot/**" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,env,.venv,.env
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,env,.venv,.env
    
    - name: Check Python syntax
      run: |
        python -m py_compile app.py
        python -m py_compile config.py
        python -m py_compile database.py
        python -m py_compile models.py
        python -m py_compile utils.py
        python -m py_compile routes/*.py

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify imports
      run: |
        python -c "import flask; print('Flask version:', flask.__version__)"
        python -c "import database; print('Database module imported')"
        python -c "import models; print('Models module imported')"
        python -c "import utils; print('Utils module imported')"
        python -c "import config; print('Config module imported')"
    
    - name: Check database initialization
      run: |
        python -c "
        from app import app, db
        from models import Member, Transaction, ServerInfo, Backup, Activity
        with app.app_context():
            db.create_all()
            print('Database tables created successfully')
        "
    
    - name: Validate configuration
      run: |
        python -c "
        from config import Config
        config = Config()
        is_valid, errors = config.validate()
        print(f'Configuration valid: {is_valid}')
        if not is_valid:
            for error in errors:
                print(f'  - {error}')
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run safety check
      run: |
        # Check for known security vulnerabilities in dependencies
        safety check --json || true
    
    - name: Run bandit security scan
      run: |
        # Scan Python code for security issues
        bandit -r . -f json -o bandit-report.json --exclude ./venv,./env,./.venv,./.env || true
        bandit -r . --exclude ./venv,./env,./.venv,./.env
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        mkdir -p dist
        # Copy application files
        cp -r *.py *.html *.css *.js *.md dist/ 2>/dev/null || true
        cp -r routes dist/ 2>/dev/null || true
        cp requirements.txt dist/
        cp .env.example dist/
        # Create version file
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > dist/VERSION
        echo "GIT_COMMIT=${{ github.sha }}" >> dist/VERSION
        echo "GIT_BRANCH=${{ github.ref_name }}" >> dist/VERSION
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcreatopia-app
        path: dist/
        retention-days: 7

  frontend-check:
    name: Check Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Check JavaScript syntax
      run: |
        node -c script.js
        node -c admin.js
    
    - name: Check HTML files
      run: |
        # Basic HTML validation
        for file in *.html; do
          echo "Checking $file..."
          if ! grep -q "<!DOCTYPE html>" "$file"; then
            echo "Warning: $file missing DOCTYPE"
          fi
        done

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.12-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements first for better caching
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application files
        COPY . .

        # Create data directory for SQLite
        RUN mkdir -p /app/data

        # Expose port
        EXPOSE 5000

        # Set environment variables
        ENV FLASK_APP=app.py
        ENV FLASK_ENV=production
        ENV DATABASE_URL=sqlite:///data/mcreatopia.db

        # Run with gunicorn
        CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "wsgi:app"]
        EOF
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mcreatopia:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker build -t mcreatopia:test .
        echo "Docker image built successfully"

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, frontend-check]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend: ${{ needs.frontend-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
